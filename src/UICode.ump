class Window
{
  after constructor
  {
    init();
  }
  
  public void init()
  {
    LayerSidePanel sidePanel = new LayerSidePanel();
    mainPanel = new MainPanel(new LayerPanel(sidePanel), new ToolPanel());
    
    add(mainPanel);
    
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    pack();
    setVisible(true);
    setResizable(false);
  }
}

class MainPanel
{
  after constructor
  {
    setLayout(new BorderLayout());
    
    add(layerPanel, BorderLayout.EAST);
    add(toolPanel, BorderLayout.WEST);
    
    setOpaque(true);
    setBackground(Color.WHITE);
  }
  
  public void paintAt(int x, int y, int prevX, int prevY)
  {
    layerPanel.paintOnCurrentLayer(x, y, prevX, prevY);
  }
  
  public JLabel newLayer()
  {
    Layer layer = new Layer(Layer.DEFAULT_HEIGHT, Layer.DEFAULT_WIDTH, Layer.DEFAULT_COLOR);
    layerPanel.getSidePanel().addLayer(layer);
    return layerPanel.getSidePanel().getPreview(layerPanel.getSidePanel().indexOfLayer(layer));
  }
}

class LayerSidePanel
{
  after constructor
  {
    addLayerButtonPanel = new Panel();
    containerForPreviews = new Panel();
    addLayerButtonPanel.setLayout(new BorderLayout());
    containerForPreviews.setLayout(new BoxLayout(containerForPreviews, BoxLayout.Y_AXIS));
    containerForPreviews.setBackground(Layer.DEFAULT_COLOR);
    
    addLayerButton = new Button();
    addLayerButton.setText("+");
    addLayerButton.setPreferredSize(new Dimension(20, 20));
    
    add(containerForPreviews, BorderLayout.NORTH);
    add(addLayerButtonPanel, BorderLayout.SOUTH);
    
    setOpaque(false);
  }
  
  after addLayer
  {
    layerPanel.setCurrentLayer(aLayer);
    addPreview(new JLabel(new ImageIcon(aLayer.getImageSource().getScaledInstance(Layer.PREVIEW_HEIGHT, Layer.PREVIEW_WIDTH, Image.SCALE_SMOOTH))));
    repaintPreview();
  }
  
  after addPreview, addPreviewAt
  {
    containerForPreviews.add(aPreview);
  }
  
  before removePreview
  {
    containerForPreviews.remove(aPreview);
  }
  
  public void repaintPreview()
  {
    Layer currentLayer = getLayerPanel().getCurrentLayer();
    
    if(lastSelectedLayer != null && currentLayer != lastSelectedLayer)
    {
      getPreview(indexOfLayer(lastSelectedLayer)).setBackground(Color.WHITE);
    }
    
    getPreview(indexOfLayer(currentLayer)).setIcon(new ImageIcon(currentLayer.getImageSource().getScaledInstance(Layer.PREVIEW_HEIGHT, Layer.PREVIEW_WIDTH, Image.SCALE_SMOOTH)));
    addLayerButtonPanel.remove(addLayerButton);
    
    revalidate();
    
    JLabel newPrev = getPreview(indexOfLayer(currentLayer));
    newPrev.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
    newPrev.setBackground(Color.BLACK);
    
    addLayerButtonPanel.add(addLayerButton);
    
    lastSelectedLayer = currentLayer;
  }
  
  public void addAllListeners(Controller contr)
  {
    addLayerButton.addActionListener(contr);
    getPreview(0).addMouseListener(contr.getMouseListener());
  }
  
  public void selectLayer(JLabel preview)
  {
    layerPanel.setCurrentLayer(getLayer(indexOfPreview(preview)));
    repaintPreview();
  }
}

class LayerPanel
{
  after constructor
  {
    setLayout(new BorderLayout());
    
    drawingSurface = new LayeredPanel();
    drawingSurface.setOpaque(false);
    
    drawingSurface.setPreferredSize(new Dimension(Layer.DEFAULT_HEIGHT, Layer.DEFAULT_WIDTH));
    drawingSurface.setBounds(0, 0, Layer.DEFAULT_HEIGHT, Layer.DEFAULT_WIDTH);
    
    add(sidePanel, BorderLayout.WEST);
    add(drawingSurface, BorderLayout.EAST);
    
    sidePanel.setLayerPanel(this);
    sidePanel.addLayer(new Layer(Layer.DEFAULT_HEIGHT, Layer.DEFAULT_WIDTH, Layer.DEFAULT_COLOR));
    
    setCurrentLayer(getSidePanel().getLayer(0));
    
    setOpaque(false);
    revalidate();
    
    getSidePanel().repaintPreview();
  }
  
  after setCurrentLayer
  {
    if(!drawingSurface.isAncestorOf(aCurrentLayer))
    {
      aCurrentLayer.setBounds(0, 0, Layer.DEFAULT_HEIGHT, Layer.DEFAULT_WIDTH);
      drawingSurface.add(aCurrentLayer, 0, 0);
      drawingSurface.revalidate();
      drawingSurface.repaint();
    }
    else
    {
      drawingSurface.moveToFront(aCurrentLayer);
    }
  }
  
  public void paintOnCurrentLayer(int x, int y, int prevX, int prevY)
  {
    BufferedImage img = currentLayer.getImageSource();
    Graphics2D g = img.createGraphics();
    
    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    
    if(prevX == -1 || prevY == -1)
    {
      prevX = x;
      prevY = y;
    }
    
    g.setColor(new Color(0, 0, 0));
    BasicStroke stroke = new BasicStroke(3);
    g.setStroke(stroke);
    g.drawLine(x, y, prevX, prevY);
    g.dispose();
    
    getSidePanel().repaintPreview();
  }
}

class ToolPanel
{
  after constructor
  {
    setOpaque(false);
  }
}

class Layer
{
  after constructor
  {
    setPreferredSize(new Dimension(width, height));
    setImageData(new Image(new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB)));
    setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
    
    setOpaque(false);
  }
  
  public BufferedImage getImageSource()
  {
    return getImageData().getSrcImage();
  }
  
  public void paintComponent(Graphics g)
  {
    super.paintComponent(g);
    
    g.drawImage(getImageSource(), 0, 0, null);
    repaint();
  }
}
