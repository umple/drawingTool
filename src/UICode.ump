class Window
{
  after constructor
  {
    
    init();
  }
  
  public void init()
  {
    LayerSidePanel sidePanel = new LayerSidePanel();
    mainPanel = new MainPanel(new LayerPanel(sidePanel), new ToolPanel());
    
    add(mainPanel);
    
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    pack();
    setVisible(true);
    setResizable(false);
  }
}

class MainPanel
{
  after constructor
  {
    setLayout(new BorderLayout());
    
    add(layerPanel, BorderLayout.EAST);
    add(toolPanel, BorderLayout.WEST);
    
    setOpaque(true);
    setBackground(Color.WHITE);
  }
  
  public void paintAt(int x, int y, int prevX, int prevY)
  {
    layerPanel.paintOnCurrentLayer(x, y, prevX, prevY);
  }
  
  public JLabel newLayer()
  {
    Layer layer = new Layer(Layer.DEFAULT_HEIGHT, Layer.DEFAULT_WIDTH, Layer.DEFAULT_COLOR);
    layerPanel.getSidePanel().addLayer(layer);
    return layerPanel.getSidePanel().getPreview(layerPanel.getSidePanel().indexOfLayer(layer));
  }
  
  public void changeTool(Tool tool)
  {
    toolPanel.setCurrentlySelectedTool(tool);
  }
  
  public void deleteCurrentLayer()
  {
    layerPanel.getSidePanel().deleteCurrentLayer();
  }
  
  public void moveLayerUp()
  {
    layerPanel.getSidePanel().moveLayerUp();
  }
  
  public void moveLayerDown()
  {
    layerPanel.getSidePanel().moveLayerDown();
  }
}

class LayerSidePanel
{
  after constructor
  {
    layerManagementButtonPanel = new Panel();
    containerForPreviews = new Panel();
    layerManagementButtonPanel.setLayout(new GridLayout(0, 1));
    containerForPreviews.setLayout(new BoxLayout(containerForPreviews, BoxLayout.Y_AXIS));
    containerForPreviews.setBackground(Layer.DEFAULT_COLOR);
    containerForPreviews.setBorder(BorderFactory.createTitledBorder("Layers"));
    
    initButtons();
    
    add(containerForPreviews, BorderLayout.NORTH);
    add(layerManagementButtonPanel, BorderLayout.SOUTH);
    
    setOpaque(false);
  }
  
  private void initButtons()
  {
    addLayerButton = new Button();
    addLayerButton.setText("+");
    addLayerButton.setPreferredSize(new Dimension(25, 25));
    
    removeLayerButton = new Button();
    removeLayerButton.setText("-");
    removeLayerButton.setPreferredSize(new Dimension(25, 25));
    
    pushLayerUp = new Button();
    pushLayerUp.setText("\u2191");
    pushLayerUp.setPreferredSize(new Dimension(25, 25));
    
    pushLayerDown = new Button();
    pushLayerDown.setText("\u2193");
    pushLayerDown.setPreferredSize(new Dimension(25, 25));
    
    layerManagementButtonPanel.add(addLayerButton);
    layerManagementButtonPanel.add(removeLayerButton);
    layerManagementButtonPanel.add(pushLayerUp);
    layerManagementButtonPanel.add(pushLayerDown);
  }
  
  after addLayer
  {
    layerPanel.setCurrentLayer(aLayer);
    addPreview(new JLabel(new ImageIcon(aLayer.getImageSource().getScaledInstance(Layer.PREVIEW_HEIGHT, Layer.PREVIEW_WIDTH, Image.SCALE_SMOOTH))));
    repaintPreview();
  }
  
  before removeLayer
  {
    int oldIndex = indexOfLayer(aLayer);
    int newIndex = (oldIndex == 0) ? 0 : oldIndex-1;
    removePreview(getPreview(oldIndex));
  }
  
  after removeLayer
  {
    layerPanel.setCurrentLayer(getLayer(newIndex));
    lastSelectedLayer = null;
    aLayer.clear();
    
    repaintPreview();
  }
  
  after addPreview, addPreviewAt
  {
    containerForPreviews.add(aPreview);
  }
  
  before removePreview
  {
    containerForPreviews.remove(aPreview);
  }
  
  public void repaintPreview()
  {
    Layer currentLayer = getLayerPanel().getCurrentLayer();
    
    if(lastSelectedLayer != null && currentLayer != lastSelectedLayer)
    {
      getPreview(indexOfLayer(lastSelectedLayer)).setBackground(Color.WHITE);
    }
    getPreview(indexOfLayer(currentLayer)).setIcon(new ImageIcon(currentLayer.getImageSource().getScaledInstance(Layer.PREVIEW_HEIGHT, Layer.PREVIEW_WIDTH, Image.SCALE_SMOOTH)));
    
    revalidate();
    
    JLabel newPrev = getPreview(indexOfLayer(currentLayer));
    newPrev.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
    newPrev.setBackground(Color.DARK_GRAY);
    
    for(JLabel p : getPreviews())
    {
      containerForPreviews.remove(p);
    }
    for(JLabel p : getPreviews())
    {
      containerForPreviews.add(p);
    }
    
    lastSelectedLayer = currentLayer;
  }
  
  public void addAllListeners(Controller contr)
  {
    addLayerButton.addActionListener(contr);
    removeLayerButton.addActionListener(contr);
    pushLayerUp.addActionListener(contr);
    pushLayerDown.addActionListener(contr);
    getPreview(0).addMouseListener(contr.getMouseListener());
  }
  
  public void selectLayer(JLabel preview)
  {
    layerPanel.setCurrentLayer(getLayer(indexOfPreview(preview)));
    repaintPreview();
  }
  
  public void deleteCurrentLayer()
  {
    if(numberOfLayers() > 1)
    {
      removeLayer(layerPanel.getCurrentLayer());
    }
    else
    {
      layerPanel.getCurrentLayer().clear();
      repaintPreview();
    }
  }
  
  public void moveLayerUp()
  {
    if(indexOfLayer(layerPanel.getCurrentLayer()) != 0)
    {
      Layer currentLayer = layerPanel.getCurrentLayer();
      int index = indexOfLayer(currentLayer);
      
      addOrMoveLayerAt(currentLayer, index-1);
      addOrMovePreviewAt(getPreview(index), index-1);
      layerPanel.updateLayers();
      
      repaintPreview();
    }
  }
  
  public void moveLayerDown()
  {
    if(indexOfLayer(layerPanel.getCurrentLayer()) < numberOfLayers()-1)
    {
      Layer currentLayer = layerPanel.getCurrentLayer();
      int index = indexOfLayer(currentLayer);
      
      addOrMoveLayerAt(currentLayer, index+1);
      addOrMovePreviewAt(getPreview(index), index+1);
      layerPanel.updateLayers();
      
      repaintPreview();
    }
  }
}

class LayerPanel
{
  after constructor
  {
    setLayout(new BorderLayout());
    
    drawingSurface = new LayeredPanel();
    drawingSurface.setOpaque(false);
    
    drawingSurface.setPreferredSize(new Dimension(Layer.DEFAULT_HEIGHT, Layer.DEFAULT_WIDTH));
    drawingSurface.setBounds(0, 0, Layer.DEFAULT_HEIGHT, Layer.DEFAULT_WIDTH);
    
    add(sidePanel, BorderLayout.WEST);
    add(drawingSurface, BorderLayout.EAST);
    
    sidePanel.setLayerPanel(this);
    sidePanel.addLayer(new Layer(Layer.DEFAULT_HEIGHT, Layer.DEFAULT_WIDTH, Layer.DEFAULT_COLOR));
    
    setCurrentLayer(getSidePanel().getLayer(0));
    
    setOpaque(false);
    revalidate();
    
    getSidePanel().repaintPreview();
  }
  
  after setCurrentLayer
  {
    if(!drawingSurface.isAncestorOf(aCurrentLayer))
    {
      aCurrentLayer.setBounds(0, 0, Layer.DEFAULT_HEIGHT, Layer.DEFAULT_WIDTH);
      drawingSurface.setLayer(aCurrentLayer, sidePanel.indexOfLayer(aCurrentLayer)+1);
      drawingSurface.add(aCurrentLayer);
      updateLayers();
      drawingSurface.revalidate();
      drawingSurface.repaint();
    }
  }
  
  public void paintOnCurrentLayer(int x, int y, int prevX, int prevY)
  {
    BufferedImage img = currentLayer.getImageSource();
    Graphics2D g = img.createGraphics();
    
    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    
    if(prevX == -1 || prevY == -1)
    {
      prevX = x;
      prevY = y;
    }
    
    ToolProperties toolProperties = ((MainPanel)getParent()).getToolPanel().getCurrentlySelectedTool().getToolProperties();
    
    if(toolProperties.getIsEraser())
    {
      g.setComposite(AlphaComposite.getInstance(AlphaComposite.DST_OUT, ((float)(toolProperties.getOpacity())/100)));
    }
    else
    {
      Color color = toolProperties.getColor();
	  g.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), (int)(toolProperties.getOpacity()*2.5)));
    }
    
    BasicStroke stroke = new BasicStroke(toolProperties.getCurrentSize(), BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND);
	g.setStroke(stroke);
	g.drawLine(x, y, prevX, prevY);
    
    g.dispose();
    
    getSidePanel().repaintPreview();
  }
  
  public void updateLayers()
  {
    for(Component c : drawingSurface.getComponents())
    {
      if(c instanceof Layer)
      {
        Layer layer = (Layer)c;
        drawingSurface.setLayer(layer, (sidePanel.numberOfLayers()-sidePanel.indexOfLayer(layer)));
      }
    }
  }
}

class ToolPanel
{
  after constructor
  {
    setLayout(new BorderLayout());
    toolViewContainer = new Panel();
    toolViewContainer.setBackground(Layer.DEFAULT_COLOR);
    toolViewContainer.setLayout(new GridLayout(0, 1));
    toolViewContainer.setBorder(BorderFactory.createTitledBorder("Tools"));
    
    toolProperties = new Panel();
    toolProperties.setBackground(Layer.DEFAULT_COLOR);
    toolProperties.setLayout(new GridLayout(0, 1));
    toolProperties.setBorder(BorderFactory.createTitledBorder("Tool Properties"));
    
    addPropertiesContent();
    
    addAllBaseTools();
    
    add(toolViewContainer, BorderLayout.NORTH);
    add(toolProperties, BorderLayout.SOUTH);
    
    setOpaque(false);
  }
  
  after addTool
  {
    setCurrentlySelectedTool(aTool);
    toolViewContainer.add(aTool);
  }
  
  after setCurrentlySelectedTool
  {
    sizeSlider.setValue(adjustSliderValue(aCurrentlySelectedTool.getToolProperties().getCurrentSize()));
    opacitySlider.setValue(adjustSliderValue(aCurrentlySelectedTool.getToolProperties().getOpacity()));
    
    if(aCurrentlySelectedTool.getToolProperties().getIsEraser())
    {
      changeColor.setVisible(false);
    }
    else
    {
      changeColor.setVisible(true);
    }
    
    for(Tool t : getTools())
    {
      t.setBackground(Color.WHITE);
    }
    aCurrentlySelectedTool.setBackground(Color.LIGHT_GRAY);
  }
  
  private int adjustSliderValue(int value)
  {
    if(value <= 50)
    {
	  value = (int)(Math.sqrt(value*50));
	  if(value == 0) value = 1;
    }
    return value;
  }
  
  public void addAllBaseTools()
  {
    Tool ink = new Tool("Ink");
    ink.getToolProperties().setCurrentSize(5);
    addTool(ink);
    
    Tool airBrush = new Tool("Airbrush");
    airBrush.getToolProperties().setCurrentSize(100);
    airBrush.getToolProperties().setOpacity(1);
    addTool(airBrush);
    
    Tool eraser = new Tool("Eraser");
    eraser.getToolProperties().setCurrentSize(20);
    eraser.getToolProperties().setIsEraser(true);
    addTool(eraser);
    
    setCurrentlySelectedTool(getTool(0));
  }
  
  public void addPropertiesContent()
  {
    toolProperties.add(new JLabel("Size"));
    sizeSlider = new JSlider(1, 100, 5);
    sizeSlider.setName("sizeSlider");
    toolProperties.add(sizeSlider);
    
    toolProperties.add(new JLabel("Opacity"));
    opacitySlider = new JSlider(1, 100, 100);
    opacitySlider.setName("opacitySlider");
    toolProperties.add(opacitySlider);
    
    changeColor = new Button();
    changeColor.setText("Colour...");
    changeColor.setHorizontalAlignment(SwingConstants.LEFT);
    toolProperties.add(changeColor);
  }
  
  public void addAllListeners(Controller contr, Controller.SliderListener sliderListener)
  {
    for(Tool tool : getTools())
    {
      tool.addActionListener(contr);
    }
    changeColor.addActionListener(contr);
    sizeSlider.addChangeListener(sliderListener);
    opacitySlider.addChangeListener(sliderListener);
  }
}

class Tool
{
  after constructor
  {
    setText(toolName);
    setPreferredSize(new Dimension(30, 30));
    setBackground(Color.WHITE);
    setOpaque(true);
    setBorderPainted(false);
    
    setToolProperties(new ToolProperties(toolName, ToolProperties.DEFAULT_OPACITY, false, ToolProperties.DEFAULT_SIZE, Color.BLACK, this));
  }
}

class Layer
{
  after constructor
  {
    setPreferredSize(new Dimension(width, height));
    setImageData(new Image(new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB)));
    setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
    
    setOpaque(false);
  }
  
  public BufferedImage getImageSource()
  {
    return getImageData().getSrcImage();
  }
  
  public void paintComponent(Graphics g)
  {
    super.paintComponent(g);
    
    g.drawImage(getImageSource(), 0, 0, null);
    repaint();
  }
  
  public void clear()
  {
   Graphics2D graphics = (Graphics2D) getImageSource().getGraphics();
   graphics.setBackground(new Color(255, 255, 255, 0));
   graphics.clearRect(0, 0, width, height);
  }
  
}